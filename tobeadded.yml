---

  - name: Proof of concept
    hosts: localhost
    become: true
    gather_facts: true

    pre_tasks:
      - name: Include the file containing the users to be added
        include_vars: users.yml

      - name: Include the password protected with the ansible secret
        include_vars: secret.yml

    tasks:
    #Upgrade all packages
    #  - name: Upgrade packages
    #    ansible.builtin.dnf:
    #      name: "*"
    #      state: latest
    
    #Ensure NTP is running well
    #  - name: Make sure NTP service is running
    #     ansible.builtin.systemd:
    #      state: started
    #      name: systemd-timesyncd

    # Creating users 
      - name: Crate users using users.yml
        ansible.builtin.user:
          name: "{{ item.username }}"
          shell: /bin/bash
          create_home: true 
          group: wheel #we need more groups, maybe based on type of server. SSH config should be modified so that it allows certain groups not certain users as it would be easier to be edited
          append: true
          force: true # this should only affect users with state that is absent 
          state: "{{ item.state | default ('present') }}"
          password: "{{ password | password_hash('sha512', password_salt) }}"
          update_password: on_create
          # password_expire_max: 1
        with_items: "{{ users_list }}"
     
      #Ensuring users have ssh access
      - name: Set the authorized_keys file for each user
        ansible.posix.authorized_key:
          user: "{{ item.username }}"
          key: "{{ lookup('file', '/home/hinceanb/git/{{item.username}}.pub') }}"
        when: item.get('state', 'present') == 'present'
        with_items: "{{ users_list }}"

      #Removing home directories of state=absent users
      - name: Removing home directories
        file:
          path: "/home/{{ item.username }}"
          state: absent
        register: out_home
        when: item.get('state', 'absent') == 'absent'
        with_items: "{{ users_list }}"

      #Removing sudoers directories of state=absent and admin users
      - name: Removing sudo directories
        file:
          path: "/etc/sudoers.d/{{ item.username }}"
          state: absent
        register: out_sudo
        when: item.get('state', 'absent') == 'absent'
        with_items: "{{ users_list }}"

      - debug:
          var: out_home
          var: out_sudo

      #Assigning admin rights to users with state admin
      - name: Assigning sudo role to admin users
        copy:
          content: "{{ item.username }} ALL=(ALL) ALL" #I do not have access to see the structure of the file 
          dest: "/etc/sudoers.d/{{ item.username }}"
          mode: 0440
          owner: root
          group: root
        when: item.type is defined and item.type == 'admin' and item.get('state', 'present') == 'present'
        with_items: "{{ users_list }}"

      #Disable remote login for root
      # - name: Disable remote login for root
      #  ansible.builtin.lineinfile:
      #    path: /etc/ssh/sshd_config
      #    state: present
      #    regexp: '^PermitRootLogin yes'
      #    line: 'PermitRootLogin no'

      #Extra things

      #Remove packages no longer required on the server
      #- name: Autoremove unneeded packages installed as dependencies
      # ansible.builtin.dnf:
      #   autoremove: yes

      #Restart SSH daemon as we made changes to ssh config
      #- name: Restart the SSH daemon
      # ansible.builtin.systemd:
      #   state: restarted
      #   name: ssh

      #Reboot hosts
      #- name: Reboot all hosts
      # ansible.builtin.reboot:

        
        
