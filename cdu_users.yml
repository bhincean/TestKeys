---

  - name: Create or delete users based on their state
    hosts: localhost
    become: true
    # become_user: root
    gather_facts: true
    #We will need to add community.general.mail not sure whether it is community.general or community.mail
    collections:
      - ansible.posix
      - community.general
  

    pre_tasks:
      - name: Include the file containing the users to be added
        include_vars: users.yml

      - name: Include the password protected with the ansible secret
        include_vars: secret.yml

    tasks:
    #Upgrade all packages
    #  - name: Upgrade packages
    #    ansible.builtin.dnf:
    #      name: "*"
    #      state: latest
    
    #Ensure NTP is running well
    #  - name: Make sure NTP service is running
    #     ansible.builtin.systemd:
    #      state: started
    #      name: systemd-timesyncd

    # Creating admin users
      - name: Create users with type admin in users.yml
        ansible.builtin.user:
          name: "{{ item.username }}"
          shell: /bin/bash
          create_home: true 
          group: wheel 
          append: true
          force: true # this should only affect users with state that is absent 
          state: "{{ item.state | default ('present') }}"
          password: "{{ password | password_hash('sha512', password_salt) }}"
          update_password: on_create
        when: item.type is defined and item.type == 'admin' 
        with_items: "{{ users_list }}"

    #Assigning admin rights to users with type admin
      - name: Assigning sudo role to admin users
        copy:
          content: "{{ item.username }} ALL=(ALL) ALL" 
          dest: "/etc/sudoers.d/{{ item.username }}"
          mode: 0440
          owner: root
          group: root
        when: item.type is defined and item.type == 'admin' and item.get('state', 'present') == 'present'
        with_items: "{{ users_list }}"

      # Creating noraml users, they will only be able to connect via ssh 
      - name: Create users with type normal in users.yml
        ansible.builtin.user:
          name: "{{ item.username }}"
          shell: /bin/bash
          create_home: true 
          group: users
          append: true
          force: true # this should only affect users with state that is absent 
          state: "{{ item.state | default ('present') }}"
        when: item.type is defined and item.type == 'normal' 
        with_items: "{{ users_list }}"

      #Ensuring all users have SSH access
      - name: Handling an exceprion
        block:
          - name: Set the authorized_keys file for each user in users.yml
            ansible.posix.authorized_key:
              user: "{{ item.username }}"
              key: "{{ lookup('file', 'keys/{{item.username}}.pub') }}"
            when: item.get('state', 'present') == 'present' and not item.locked
            with_items: "{{ users_list }}"
        rescue: 
          - ansible.builtin.debug:
              msg: "Ensure public keys of active users are in the repository"

      #Removing home directories of state=absent users
      - name: Removing home directories for absent users
        file:
          path: "/home/{{ item.username }}"
          state: absent
        register: out_home
        when: item.get('state', 'absent') == 'absent'
        with_items: "{{ users_list }}"

      #Removing sudoers directories of state=absent and admin users
      - name: Removing sudo directories for absent users 
        file:
          path: "/etc/sudoers.d/{{ item.username }}"
          state: absent
        register: out_sudo
        when: item.get('state', 'absent') == 'absent'
        with_items: "{{ users_list }}"

      #Disable locked admin existing accounts
      - name: Disable locked admin  accounts
        command: usermod -L {{ item.username }}
        register: out_deactivated
        when: item.locked and item.state == 'present' and item.type == 'admin'
        with_items: "{{ users_list }}"
        
      #Remove ssh keys for locked users
      - name: Remove authorized_keys file for all locked users
        file:
          path: "/home/{{ item.username }}/.ssh/authorized_keys"
          state: absent
        register: out_authorized_keys
        when: item.locked and item.state == 'present'
        with_items: "{{ users_list }}"

      #Enable locked admin existing accounts
      - name: Enable locked admin accounts
        command: usermod -U {{ item.username }}
        when: not item.locked and item.state == 'present' and item.type == 'admin'
        with_items: "{{ users_list }}"

        
      - debug:
          var: out_home
          var: out_sudo
          var: out_deactivated
          var: out_authorized_keys

      #Disable remote login for root
      # - name: Disable remote login for root
      #  ansible.builtin.lineinfile:
      #    path: /etc/ssh/sshd_config
      #    state: present
      #    regexp: '^PermitRootLogin yes'
      #    line: 'PermitRootLogin no'

      #Extra things

      #Remove packages no longer required on the server
      #- name: Autoremove unneeded packages installed as dependencies
      # ansible.builtin.dnf:
      #   autoremove: yes

      #Restart SSH daemon as we made changes to ssh config
      #- name: Restart the SSH daemon
      # ansible.builtin.systemd:
      #   state: restarted
      #   name: ssh

      #Reboot hosts
      #- name: Reboot all hosts
      # ansible.builtin.reboot:

        
        
